{"version":3,"sources":["webpack:///Editor.js","webpack:///webpack/bootstrap 69911eac1462664372c4","webpack:///./src/scripts/app/EditorUI.coffee","webpack:///external \"TweenTime.Editor\"","webpack:///external \"d3\"","webpack:///./src/scripts/vendors/three.js-extras/Projector.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","bind","fn","me","apply","arguments","require","EditorUI","THREE","TweenTimeEditor","d3","window","this","initAdd","initRemove","onMenuCreated","$container","getRaycaster","mouse","offset","plane","projector","selectedObject","selectedObjectPos","tweenTime","editor","json_replacer","key","val","$","app","containerWebgl","Vector3","Projector","Vector2","Mesh","PlaneBufferGeometry","MeshBasicMaterial","color","opacity","transparent","visible","onSelect","add","item","addToSelection","dispatchEvent","Event","_this","camera","raycaster","vector","activeCamera","x","y","unproject","Raycaster","position","sub","normalize","mousedown","e","element","intersects","preventDefault","intersectObjects","scene","children","length","object","_data","selectionManager","select","clone","intersectObject","copy","point","mouseup","mousemove","pos","posDiff","prop_x","prop_y","clientX","width","clientY","height","getProperty","setValue","_isDirty","timeline","prototype","$el","append","prepend","data","self","find","click","datum","i","index","len","ref","selection","indexOf","type","splice","destroy","reset","render","$link","element_name","elements","ElementFactory","all_data","current_time","label","next_id","timer","time","isDirty","start","end","collapsed","properties","getTypeProperties","push","undefined","TweenTime","Editor","RenderableObject","z","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","Color","material","uvs","positionWorld","positionScreen","Vector4","vertex","RenderableLine","vertexColors","RenderableSprite","rotation","scale","getNextObjectInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","face","_facePool","getNextLineInPool","_lineCount","_linePoolLength","line","_linePool","getNextSpriteInPool","_spriteCount","_spritePoolLength","sprite","_spritePool","painterSort","a","b","clipLine","s1","s2","alpha1","alpha2","bc1near","w","bc2near","bc1far","bc2far","Math","max","min","lerp","_object","_vertex","_face","_line","_sprite","_modelMatrix","_renderData","objects","lights","_vector3","_vector4","_clipBox","Box3","_boundingBox","_points3","Array","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","Matrix3","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","console","warn","project","unprojectVector","pickingRay","error","RenderList","normals","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","projectVertex","applyMatrix4","invW","pushVertex","set","pushNormal","pushUv","checkTriangleVisibility","isIntersectionBox","setFromPoints","checkBackfaceCulling","pushLine","pushTriangle","side","DoubleSide","normal","applyMatrix3","offset2","uv","renderList","projectScene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Line","Sprite","frustumCulled","intersectsObject","setFromMatrixPosition","applyProjection","sort","o","ol","geometry","BufferGeometry","attributes","offsets","positions","array","l","indices","count","Geometry","vertices","faces","faceVertexUvs","isFaceMaterial","MeshFaceMaterial","objectMaterials","v","vl","morphTargets","morphInfluences","morphTargetInfluences","t","tl","influence","target","targetVertex","f","fl","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","n","nl","vertexUvs","u","step","mode","LinePieces","multiplyScalar","VertexColors","colors","abs"],"mappings":"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","file":"Editor.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"assets/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\n\t  var EditorUI, THREE, TweenTimeEditor, d3;\n\t  THREE = window.THREE;\n\t  TweenTimeEditor = __webpack_require__(4);\n\t  __webpack_require__(11);\n\t  d3 = __webpack_require__(5);\n\t  return window.EditorUI = EditorUI = (function() {\n\t    function EditorUI() {\n\t      this.initAdd = bind(this.initAdd, this);\n\t      this.initRemove = bind(this.initRemove, this);\n\t      this.onMenuCreated = bind(this.onMenuCreated, this);\n\t      var $container, getRaycaster, mouse, offset, plane, projector, selectedObject, selectedObjectPos;\n\t      this.tweenTime = window.tweenTime;\n\t      this.editor = new TweenTimeEditor(this.tweenTime, {\n\t        json_replacer: function(key, val) {\n\t          if (key === 'container') {\n\t            return void 0;\n\t          }\n\t          if (key === 'parent') {\n\t            return void 0;\n\t          }\n\t          if (key === 'children') {\n\t            return void 0;\n\t          }\n\t          if (key === 'object') {\n\t            return void 0;\n\t          }\n\t          if (key === 'classObject') {\n\t            return void 0;\n\t          }\n\t          return val;\n\t        }\n\t      });\n\t      this.onMenuCreated($('.timeline__menu'));\n\t      $container = $(window.app.containerWebgl);\n\t      offset = new THREE.Vector3();\n\t      projector = new THREE.Projector();\n\t      mouse = new THREE.Vector2();\n\t      selectedObject = false;\n\t      selectedObjectPos = new THREE.Vector3();\n\t      plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(3000, 2000, 8, 8), new THREE.MeshBasicMaterial({\n\t        color: 0xff0000,\n\t        opacity: 0.25,\n\t        transparent: true\n\t      }));\n\t      plane.visible = false;\n\t      this.editor.onSelect.add(function(item, addToSelection) {\n\t        return window.dispatchEvent(new Event('resize'));\n\t      });\n\t      getRaycaster = (function(_this) {\n\t        return function() {\n\t          var camera, raycaster, vector;\n\t          camera = window.activeCamera;\n\t          vector = new THREE.Vector3(mouse.x, mouse.y, 0.5).unproject(camera);\n\t          raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\n\t          return raycaster;\n\t        };\n\t      })(this);\n\t      $container.mousedown((function(_this) {\n\t        return function(e) {\n\t          var element, intersects, raycaster;\n\t          e.preventDefault();\n\t          raycaster = getRaycaster();\n\t          intersects = raycaster.intersectObjects(window.app.scene.children);\n\t          if (intersects.length) {\n\t            element = intersects[0].object;\n\t            if (element._data) {\n\t              _this.editor.selectionManager.select(element._data);\n\t              selectedObject = element;\n\t              selectedObjectPos = selectedObject.position.clone();\n\t              intersects = raycaster.intersectObject(plane);\n\t              return offset.copy(intersects[0].point).sub(plane.position);\n\t            }\n\t          }\n\t        };\n\t      })(this));\n\t      $(window).mouseup((function(_this) {\n\t        return function(e) {\n\t          return selectedObject = false;\n\t        };\n\t      })(this));\n\t      $container.mousemove((function(_this) {\n\t        return function(e) {\n\t          var intersects, pos, posDiff, prop_x, prop_y, raycaster;\n\t          mouse.x = (e.clientX / $container.width()) * 2 - 1;\n\t          mouse.y = -(e.clientY / $container.height()) * 2 + 1;\n\t          if (!selectedObject) {\n\t            return;\n\t          }\n\t          if (!selectedObject._data) {\n\t            return;\n\t          }\n\t          prop_x = _this.tweenTime.getProperty('x', selectedObject._data);\n\t          prop_y = _this.tweenTime.getProperty('y', selectedObject._data);\n\t          raycaster = getRaycaster();\n\t          intersects = raycaster.intersectObject(plane);\n\t          pos = intersects[0].point.sub(offset);\n\t          posDiff = selectedObjectPos.clone().add(pos);\n\t          _this.tweenTime.setValue(prop_x, posDiff.x);\n\t          _this.tweenTime.setValue(prop_y, posDiff.y);\n\t          selectedObject._data._isDirty = true;\n\t          return _this.editor.timeline._isDirty = true;\n\t        };\n\t      })(this));\n\t    }\n\t\n\t    EditorUI.prototype.onMenuCreated = function($el) {\n\t      $el.append('<a class=\"menu-item menu-item--remove\">Remove</a>');\n\t      $el.prepend('<span class=\"menu-item\">Add<div class=\"submenu submenu--add\"></div></span>');\n\t      this.initAdd($el);\n\t      return this.initRemove($el);\n\t    };\n\t\n\t    EditorUI.prototype.initRemove = function($el) {\n\t      var data, selectionManager, self;\n\t      self = this;\n\t      selectionManager = self.editor.selectionManager;\n\t      data = window.tweenTime.data;\n\t      $el.find('.menu-item--remove').click(function(e) {\n\t        var datum, i, index, item, len, ref;\n\t        e.preventDefault();\n\t        ref = selectionManager.selection;\n\t        for (i = 0, len = ref.length; i < len; i++) {\n\t          item = ref[i];\n\t          datum = d3.select(item).datum();\n\t          index = data.indexOf(datum);\n\t          if (datum && datum.type && datum.id && index > -1) {\n\t            data.splice(index, 1);\n\t            if (datum.object) {\n\t              datum.object.destroy();\n\t              delete datum.object;\n\t            }\n\t          }\n\t        }\n\t        selectionManager.reset();\n\t        self.editor.render(false, false, true);\n\t      });\n\t    };\n\t\n\t    EditorUI.prototype.initAdd = function($el) {\n\t      var $container, $link, element, element_name, elements, self;\n\t      if (!window.ElementFactory) {\n\t        return;\n\t      }\n\t      $container = $el.find('.submenu--add');\n\t      elements = window.ElementFactory.elements;\n\t      self = this;\n\t      for (element_name in elements) {\n\t        element = elements[element_name];\n\t        $link = $('<a href=\"#\" data-key=\"' + element_name + '\">' + element_name + '</a>');\n\t        $container.append($link);\n\t      }\n\t      $container.find('a').click(function(e) {\n\t        var all_data, current_time, data, id, label, next_id;\n\t        e.preventDefault();\n\t        element_name = $(this).data('key');\n\t        if (ElementFactory.elements[element_name]) {\n\t          all_data = self.tweenTime.data;\n\t          next_id = all_data.length + 1;\n\t          id = \"item\" + next_id;\n\t          label = element_name + \" \" + next_id;\n\t          current_time = self.tweenTime.timer.time[0] / 1000;\n\t          data = {\n\t            isDirty: true,\n\t            id: id,\n\t            label: label,\n\t            type: element_name,\n\t            start: current_time,\n\t            end: current_time + 2,\n\t            collapsed: false,\n\t            properties: ElementFactory.getTypeProperties(element_name)\n\t          };\n\t          self.tweenTime.data.push(data);\n\t          self.editor.timeline._isDirty = true;\n\t        }\n\t      });\n\t    };\n\t\n\t    return EditorUI;\n\t\n\t  })();\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = TweenTime.Editor;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = d3;\n\n/***/ },\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author julianwa / https://github.com/julianwa\n\t */\n\t\n\tTHREE.RenderableObject = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\tthis.z = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableFace = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\tthis.v3 = new THREE.RenderableVertex();\n\t\n\t\tthis.normalModel = new THREE.Vector3();\n\t\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t\tthis.vertexNormalsLength = 0;\n\t\n\t\tthis.color = new THREE.Color();\n\t\tthis.material = null;\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t\n\t\tthis.z = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableVertex = function () {\n\t\n\t\tthis.position = new THREE.Vector3();\n\t\tthis.positionWorld = new THREE.Vector3();\n\t\tthis.positionScreen = new THREE.Vector4();\n\t\n\t\tthis.visible = true;\n\t\n\t};\n\t\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\t\n\t\tthis.positionWorld.copy( vertex.positionWorld );\n\t\tthis.positionScreen.copy( vertex.positionScreen );\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableLine = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.v1 = new THREE.RenderableVertex();\n\t\tthis.v2 = new THREE.RenderableVertex();\n\t\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t\tthis.material = null;\n\t\n\t\tthis.z = 0;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.RenderableSprite = function () {\n\t\n\t\tthis.id = 0;\n\t\n\t\tthis.object = null;\n\t\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.z = 0;\n\t\n\t\tthis.rotation = 0;\n\t\tthis.scale = new THREE.Vector2();\n\t\n\t\tthis.material = null;\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.Projector = function () {\n\t\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\t\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\t\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\t\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\t\t_points4 = new Array( 4 ),\n\t\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\t\n\t\t_normalMatrix = new THREE.Matrix3(),\n\t\n\t\t_frustum = new THREE.Frustum(),\n\t\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\t\n\t\t//\n\t\n\t\tthis.projectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\t\n\t\t};\n\t\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\t\n\t\t};\n\t\n\t\tthis.pickingRay = function ( vector, camera ) {\n\t\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tvar RenderList = function () {\n\t\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\n\t\t\tvar object = null;\n\t\t\tvar material = null;\n\t\n\t\t\tvar normalMatrix = new THREE.Matrix3();\n\t\n\t\t\tvar setObject = function ( value ) {\n\t\n\t\t\t\tobject = value;\n\t\t\t\tmaterial = object.material;\n\t\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\t\n\t\t\t\tnormals.length = 0;\n\t\t\t\tuvs.length = 0;\n\t\n\t\t\t};\n\t\n\t\t\tvar projectVertex = function ( vertex ) {\n\t\n\t\t\t\tvar position = vertex.position;\n\t\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\t\tvar positionScreen = vertex.positionScreen;\n\t\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\tvar invW = 1 / positionScreen.w;\n\t\n\t\t\t\tpositionScreen.x *= invW;\n\t\t\t\tpositionScreen.y *= invW;\n\t\t\t\tpositionScreen.z *= invW;\n\t\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\t\n\t\t\t};\n\t\n\t\t\tvar pushVertex = function ( x, y, z ) {\n\t\n\t\t\t\t_vertex = getNextVertexInPool();\n\t\t\t\t_vertex.position.set( x, y, z );\n\t\n\t\t\t\tprojectVertex( _vertex );\n\t\n\t\t\t};\n\t\n\t\t\tvar pushNormal = function ( x, y, z ) {\n\t\n\t\t\t\tnormals.push( x, y, z );\n\t\n\t\t\t};\n\t\n\t\t\tvar pushUv = function ( x, y ) {\n\t\n\t\t\t\tuvs.push( x, y );\n\t\n\t\t\t};\n\t\n\t\t\tvar checkTriangleVisibility = function ( v1, v2, v3 ) {\n\t\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\t\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\n\t\n\t\t\t\treturn _clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) );\n\t\n\t\t\t};\n\t\n\t\t\tvar checkBackfaceCulling = function ( v1, v2, v3 ) {\n\t\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\t\n\t\t\t};\n\t\n\t\t\tvar pushLine = function ( a, b ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\n\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\t\n\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t};\n\t\n\t\t\tvar pushTriangle = function ( a, b, c ) {\n\t\n\t\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\t\tvar v3 = _vertexPool[ c ];\n\t\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\t\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\t\n\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\tvar offset = arguments[ i ] * 3;\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\n\t\t\t\t\t\tnormal.set( normals[ offset ], normals[ offset + 1 ], normals[ offset + 2 ] );\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t\tvar offset2 = arguments[ i ] * 2;\n\t\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\t\tuv.set( uvs[ offset2 ], uvs[ offset2 + 1 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_face.vertexNormalsLength = 3;\n\t\n\t\t\t\t\t_face.material = object.material;\n\t\n\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\treturn {\n\t\t\t\tsetObject: setObject,\n\t\t\t\tprojectVertex: projectVertex,\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\t\tpushVertex: pushVertex,\n\t\t\t\tpushNormal: pushNormal,\n\t\t\t\tpushUv: pushUv,\n\t\t\t\tpushLine: pushLine,\n\t\t\t\tpushTriangle: pushTriangle\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar renderList = new RenderList();\n\t\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\t\n\t\t\t_faceCount = 0;\n\t\t\t_lineCount = 0;\n\t\t\t_spriteCount = 0;\n\t\n\t\t\t_renderData.elements.length = 0;\n\t\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\n\t\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\t\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\t\n\t\t\t//\n\t\n\t\t\t_objectCount = 0;\n\t\n\t\t\t_renderData.objects.length = 0;\n\t\t\t_renderData.lights.length = 0;\n\t\n\t\t\tscene.traverseVisible( function ( object ) {\n\t\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\t\n\t\t\t\t\t_renderData.lights.push( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\tif ( object.material.visible === false ) return;\n\t\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\n\t\n\t\t\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t\t\t_object.id = object.id;\n\t\t\t\t\t\t_object.object = object;\n\t\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t\t\t_object.z = _vector3.z;\n\t\n\t\t\t\t\t\t_renderData.objects.push( _object );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\t\tif ( sortObjects === true ) {\n\t\n\t\t\t\t_renderData.objects.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\t\n\t\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\trenderList.setObject( object );\n\t\n\t\t\t\t_modelMatrix = object.matrixWorld;\n\t\n\t\t\t\t_vertexCount = 0;\n\t\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\t\tvar offsets = geometry.offsets;\n\t\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\t\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( attributes.index !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar indices = attributes.index.array;\n\t\n\t\t\t\t\t\t\tif ( offsets.length > 0 ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < offsets.length; o ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar offset = offsets[ o ];\n\t\t\t\t\t\t\t\t\tvar index = offset.index;\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i = offset.start, l = offset.start + offset.count; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ] + index, indices[ i + 1 ] + index, indices[ i + 2 ] + index );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\t\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MeshFaceMaterial;\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\t\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\n\t\n\t\t\t\t\t\t\t_vector3.copy( vertex );\n\t\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\t\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\t\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\t\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\t\tvar face = faces[ f ];\n\t\n\t\t\t\t\t\t\tvar material = isFaceMaterial === true\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t\t : object.material;\n\t\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\t\n\t\t\t\t\t\t\tvar side = material.side;\n\t\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\t\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\t\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\t\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\n\t\n\t\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\n\t\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\t\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\t\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\t\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\t\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\t\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t\t_face.material = material;\n\t\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\n\t\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( attributes.index !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tvar indices = attributes.index.array;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tvar step = object.mode === THREE.LinePieces ? 2 : 1;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\t\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\n\t\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\t\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\t// Handle LineStrip and LinePieces\n\t\t\t\t\t\tvar step = object.mode === THREE.LinePieces ? 2 : 1;\n\t\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\t\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\t\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\t\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\t\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\t\n\t\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\t\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\n\t\n\t\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\t\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\n\t\t\t\t\t\t\t\t_line.material = object.material;\n\t\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\t\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\t\n\t\t\t\t\tvar invW = 1 / _vector4.w;\n\t\n\t\t\t\t\t_vector4.z *= invW;\n\t\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\t\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t\t_sprite.object = object;\n\t\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\n\t\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\t\n\t\t\t\t\t\t_sprite.material = object.material;\n\t\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( sortElements === true ) {\n\t\n\t\t\t\t_renderData.elements.sort( painterSort );\n\t\n\t\t\t}\n\t\n\t\t\treturn _renderData;\n\t\n\t\t};\n\t\n\t\t// Pools\n\t\n\t\tfunction getNextObjectInPool() {\n\t\n\t\t\tif ( _objectCount === _objectPoolLength ) {\n\t\n\t\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t\t_objectPool.push( object );\n\t\t\t\t_objectPoolLength ++;\n\t\t\t\t_objectCount ++;\n\t\t\t\treturn object;\n\t\n\t\t\t}\n\t\n\t\t\treturn _objectPool[ _objectCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextVertexInPool() {\n\t\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\n\t\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t\t_vertexPool.push( vertex );\n\t\t\t\t_vertexPoolLength ++;\n\t\t\t\t_vertexCount ++;\n\t\t\t\treturn vertex;\n\t\n\t\t\t}\n\t\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextFaceInPool() {\n\t\n\t\t\tif ( _faceCount === _facePoolLength ) {\n\t\n\t\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t\t_facePool.push( face );\n\t\t\t\t_facePoolLength ++;\n\t\t\t\t_faceCount ++;\n\t\t\t\treturn face;\n\t\n\t\t\t}\n\t\n\t\t\treturn _facePool[ _faceCount ++ ];\n\t\n\t\n\t\t}\n\t\n\t\tfunction getNextLineInPool() {\n\t\n\t\t\tif ( _lineCount === _linePoolLength ) {\n\t\n\t\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t\t_linePool.push( line );\n\t\t\t\t_linePoolLength ++;\n\t\t\t\t_lineCount ++\n\t\t\t\treturn line;\n\t\n\t\t\t}\n\t\n\t\t\treturn _linePool[ _lineCount ++ ];\n\t\n\t\t}\n\t\n\t\tfunction getNextSpriteInPool() {\n\t\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\n\t\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t\t_spritePool.push( sprite );\n\t\t\t\t_spritePoolLength ++;\n\t\t\t\t_spriteCount ++\n\t\t\t\treturn sprite;\n\t\n\t\t\t}\n\t\n\t\t\treturn _spritePool[ _spriteCount ++ ];\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction painterSort( a, b ) {\n\t\n\t\t\tif ( a.z !== b.z ) {\n\t\n\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t} else if ( a.id !== b.id ) {\n\t\n\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn 0;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction clipLine( s1, s2 ) {\n\t\n\t\t\tvar alpha1 = 0, alpha2 = 1,\n\t\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\t\t\tbc1near =  s1.z + s1.w,\n\t\t\tbc2near =  s2.z + s2.w,\n\t\t\tbc1far =  - s1.z + s1.w,\n\t\t\tbc2far =  - s2.z + s2.w;\n\t\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\t\n\t\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\t\treturn true;\n\t\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\t\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\t\treturn false;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// The line segment spans at least one clip plane.\n\t\n\t\t\t\tif ( bc1near < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t} else if ( bc2near < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( bc1far < 0 ) {\n\t\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t} else if ( bc2far < 0 ) {\n\t\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( alpha2 < alpha1 ) {\n\t\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** Editor.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"assets/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 69911eac1462664372c4\n **/","define (require) ->\n  THREE = window.THREE\n  TweenTimeEditor = require 'TweenTime.Editor'\n  require 'vendors/three.js-extras/Projector'\n\n  d3 = require 'd3'\n\n  window.EditorUI = class EditorUI\n    constructor: () ->\n      @tweenTime = window.tweenTime\n      @editor = new TweenTimeEditor(@tweenTime, {\n        #onMenuCreated: @onMenuCreated,\n        json_replacer: (key, val) ->\n          # filter some circular values\n          if key == 'container' then return undefined\n          if key == 'parent' then return undefined\n          if key == 'children' then return undefined\n          if key == 'object' then return undefined\n          if key == 'classObject' then return undefined\n          return val\n      })\n      @onMenuCreated($('.timeline__menu'))\n\n      $container = $(window.app.containerWebgl)\n      offset = new THREE.Vector3()\n      projector = new THREE.Projector()\n      mouse = new THREE.Vector2()\n      selectedObject = false\n      selectedObjectPos = new THREE.Vector3()\n\n      plane = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry( 3000, 2000, 8, 8 ),\n        new THREE.MeshBasicMaterial( { color: 0xff0000, opacity: 0.25, transparent: true } )\n      )\n      plane.visible = false\n\n\n      @editor.onSelect.add((item, addToSelection) ->\n        # Trigger window resize in order to resize the 3d render.\n        window.dispatchEvent(new Event('resize'))\n      )\n\n      getRaycaster = () =>\n        camera = window.activeCamera\n        vector = new THREE.Vector3( mouse.x, mouse.y, 0.5 ).unproject( camera )\n        raycaster = new THREE.Raycaster(camera.position, vector.sub( camera.position ).normalize())\n        return raycaster\n\n      $container.mousedown (e) =>\n        e.preventDefault()\n        raycaster = getRaycaster()\n        intersects = raycaster.intersectObjects( window.app.scene.children )\n\n        if intersects.length\n          element = intersects[0].object\n          if element._data\n            @editor.selectionManager.select(element._data)\n            selectedObject = element\n            selectedObjectPos = selectedObject.position.clone()\n\n            intersects = raycaster.intersectObject(plane)\n            offset.copy(intersects[ 0 ].point).sub(plane.position)\n      $(window).mouseup (e) =>\n        selectedObject = false\n\n      $container.mousemove (e) =>\n        mouse.x = ( e.clientX / $container.width() ) * 2 - 1\n        mouse.y = -( e.clientY / $container.height() ) * 2 + 1\n\n        if !selectedObject then return\n        if !selectedObject._data then return\n        prop_x = @tweenTime.getProperty('x', selectedObject._data)\n        prop_y = @tweenTime.getProperty('y', selectedObject._data)\n\n        raycaster = getRaycaster()\n        intersects = raycaster.intersectObject( plane )\n        pos = intersects[ 0 ].point.sub( offset )\n\n        posDiff = selectedObjectPos.clone().add(pos)\n\n        @tweenTime.setValue(prop_x, posDiff.x)\n        @tweenTime.setValue(prop_y, posDiff.y)\n        selectedObject._data._isDirty = true\n        @editor.timeline._isDirty = true\n\n\n    onMenuCreated: ($el) =>\n      $el.append('<a class=\"menu-item menu-item--remove\">Remove</a>')\n      $el.prepend('<span class=\"menu-item\">Add<div class=\"submenu submenu--add\"></div></span>')\n\n      @initAdd($el)\n      @initRemove($el)\n\n    initRemove: ($el) =>\n      self = this\n      selectionManager = self.editor.selectionManager\n      data = window.tweenTime.data\n      $el.find('.menu-item--remove').click (e) ->\n        e.preventDefault()\n        for item in selectionManager.selection\n          # only remove full objects.\n          datum = d3.select(item).datum()\n          index = data.indexOf(datum)\n          if datum && datum.type && datum.id && index > -1\n            data.splice(index, 1)\n            # also remove the three.js object\n            if datum.object\n              datum.object.destroy()\n              delete datum.object\n\n        selectionManager.reset()\n        self.editor.render(false, false, true)\n        return\n      return\n\n    initAdd: ($el) =>\n      if !window.ElementFactory then return\n      $container = $el.find('.submenu--add')\n      elements = window.ElementFactory.elements\n      self = this\n\n      for element_name, element of elements\n        $link = $('<a href=\"#\" data-key=\"' + element_name + '\">' + element_name + '</a>')\n        $container.append($link)\n\n      $container.find('a').click (e) ->\n        e.preventDefault()\n        element_name = $(this).data('key')\n        if ElementFactory.elements[element_name]\n          all_data = self.tweenTime.data\n          next_id = all_data.length + 1\n          id = \"item\" + next_id\n          label = element_name + \" \" + next_id\n          current_time = self.tweenTime.timer.time[0] / 1000\n          data =\n            isDirty: true\n            id: id\n            label: label\n            type: element_name\n            start: current_time\n            end: current_time + 2\n            collapsed: false\n            #properties: []\n            #options: window.ElementFactory.elements[element_name].default_attributes()\n            #properties: window.ElementFactory.elements[element_name].default_properties(current_time)\n            properties: ElementFactory.getTypeProperties(element_name)\n\n          self.tweenTime.data.push(data)\n          self.editor.timeline._isDirty = true\n        return\n      return\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/scripts/app/EditorUI.coffee\n **/","module.exports = TweenTime.Editor;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"TweenTime.Editor\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = d3;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t_vector3 = new THREE.Vector3(),\n\t_vector4 = new THREE.Vector4(),\n\n\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t_boundingBox = new THREE.Box3(),\n\t_points3 = new Array( 3 ),\n\t_points4 = new Array( 4 ),\n\n\t_viewMatrix = new THREE.Matrix4(),\n\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t_modelMatrix,\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t_normalMatrix = new THREE.Matrix3(),\n\n\t_frustum = new THREE.Frustum(),\n\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tvar setObject = function ( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t};\n\n\t\tvar projectVertex = function ( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t};\n\n\t\tvar pushVertex = function ( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t};\n\n\t\tvar pushNormal = function ( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t};\n\n\t\tvar pushUv = function ( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t};\n\n\t\tvar checkTriangleVisibility = function ( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t};\n\n\t\tvar checkBackfaceCulling = function ( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t};\n\n\t\tvar pushLine = function ( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t_line = getNextLineInPool();\n\n\t\t\t_line.id = object.id;\n\t\t\t_line.v1.copy( v1 );\n\t\t\t_line.v2.copy( v2 );\n\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\n\n\t\t\t_line.material = object.material;\n\n\t\t\t_renderData.elements.push( _line );\n\n\t\t};\n\n\t\tvar pushTriangle = function ( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar offset = arguments[ i ] * 3;\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\n\t\t\t\t\tnormal.set( normals[ offset ], normals[ offset + 1 ], normals[ offset + 2 ] );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar offset2 = arguments[ i ] * 2;\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.set( uvs[ offset2 ], uvs[ offset2 + 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t};\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t}\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\t_renderData.lights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.material.visible === false ) return;\n\n\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\n\n\t\t\t\t\t_object = getNextObjectInPool();\n\t\t\t\t\t_object.id = object.id;\n\t\t\t\t\t_object.object = object;\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\n\t\t\t\t\t_object.z = _vector3.z;\n\n\t\t\t\t\t_renderData.objects.push( _object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = _renderData.objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar offsets = geometry.offsets;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.index !== undefined ) {\n\n\t\t\t\t\t\tvar indices = attributes.index.array;\n\n\t\t\t\t\t\tif ( offsets.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var o = 0; o < offsets.length; o ++ ) {\n\n\t\t\t\t\t\t\t\tvar offset = offsets[ o ];\n\t\t\t\t\t\t\t\tvar index = offset.index;\n\n\t\t\t\t\t\t\t\tfor ( var i = offset.start, l = offset.start + offset.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ] + index, indices[ i + 1 ] + index, indices[ i + 2 ] + index );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MeshFaceMaterial;\n\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tvar material = isFaceMaterial === true\n\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.index !== undefined ) {\n\n\t\t\t\t\t\t\tvar indices = attributes.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object.mode === THREE.LinePieces ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t// Handle LineStrip and LinePieces\n\t\t\t\t\tvar step = object.mode === THREE.LinePieces ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tvar invW = 1 / _vector4.w;\n\n\t\t\t\t_vector4.z *= invW;\n\n\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t\t\t_sprite.id = object.id;\n\t\t\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t\t\t_sprite.z = _vector4.z;\n\t\t\t\t\t_sprite.object = object;\n\n\t\t\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t\t\t_sprite.material = object.material;\n\n\t\t\t\t\t_renderData.elements.push( _sprite );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\t\tbc1near =  s1.z + s1.w,\n\t\tbc2near =  s2.z + s2.w,\n\t\tbc1far =  - s1.z + s1.w,\n\t\tbc2far =  - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/scripts/vendors/three.js-extras/Projector.js\n ** module id = 11\n ** module chunks = 0\n **/"],"sourceRoot":""}